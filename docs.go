// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "WeKart Development Team",
            "email": "dev@wekart.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/admin/connections/cleanup": {
            "delete": {
                "description": "Remove inactive WebSocket connections",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Cleanup Connections",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/admin/connections/details": {
            "get": {
                "description": "Get detailed information about all connections",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get Connection Details",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/admin/maintenance/migrate": {
            "post": {
                "description": "Run database migrations for the WebSocket service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Run Migrations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/connections": {
            "get": {
                "description": "Returns detailed information about all active WebSocket connections",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connections"
                ],
                "summary": "Get Active Connections",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.ConnectionInfo"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/health": {
            "get": {
                "description": "Returns comprehensive health status of the WebSocket service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Enhanced Health Check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.HealthCheckResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/messages/history/{user_id}": {
            "get": {
                "description": "Get message history for a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Get Message History",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit number of messages (default: 50)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default: 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.MessageHistory"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/messages/send": {
            "post": {
                "description": "Send a custom message to a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Send Message",
                "parameters": [
                    {
                        "description": "Message data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/notifications/acknowledge/{notification_id}": {
            "put": {
                "description": "Mark a notification as acknowledged",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Acknowledge Notification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Notification ID",
                        "name": "notification_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/notifications/broadcast": {
            "post": {
                "description": "Broadcast a notification to all connected users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Broadcast Notification",
                "parameters": [
                    {
                        "description": "Broadcast message data",
                        "name": "notification",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/notifications/pending/{user_id}": {
            "get": {
                "description": "Get all pending notifications for a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Get Pending Notifications",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.Notification"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/notifications/send": {
            "post": {
                "description": "Send a notification to a specific user via WebSocket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Send Notification",
                "parameters": [
                    {
                        "description": "Notification data",
                        "name": "notification",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.NotificationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.NotificationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/stats": {
            "get": {
                "description": "Returns detailed statistics about WebSocket connections and messages",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "statistics"
                ],
                "summary": "Enhanced Statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/ws": {
            "get": {
                "description": "Upgrade HTTP connection to WebSocket with enhanced features and database persistence",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "websocket"
                ],
                "summary": "Enhanced WebSocket Connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Session ID",
                        "name": "session_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Hostname",
                        "name": "hostname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "101": {
                        "description": "Switching Protocols",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "core.AcknowledgmentStatus": {
            "type": "string",
            "enum": [
                "ack",
                "nack",
                "wip"
            ],
            "x-enum-varnames": [
                "ACK",
                "NACK",
                "WIP"
            ]
        },
        "core.ConnectionInfo": {
            "type": "object",
            "properties": {
                "connected_at": {
                    "type": "string"
                },
                "connection_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_ping_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "core.ConnectionStatus": {
            "type": "string",
            "enum": [
                "active",
                "inactive",
                "disconnected"
            ],
            "x-enum-varnames": [
                "ACTIVE",
                "INACTIVE",
                "DISCONNECTED"
            ]
        },
        "core.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "active_connections": {
                    "type": "integer"
                },
                "database_status": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "core.MessageHistory": {
            "type": "object",
            "properties": {
                "acknowledged_at": {
                    "type": "string"
                },
                "connection": {
                    "$ref": "#/definitions/core.WebSocketConnection"
                },
                "connection_id": {
                    "type": "string"
                },
                "delivered_at": {
                    "type": "string"
                },
                "error_message": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "message_content": {
                    "type": "string"
                },
                "message_type": {
                    "type": "string"
                },
                "notification": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.Notification"
                        }
                    ]
                },
                "notification_id": {
                    "type": "string"
                },
                "retry_count": {
                    "type": "integer"
                },
                "sent_at": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/core.MessageStatus"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "core.MessageStatus": {
            "type": "string",
            "enum": [
                "sent",
                "delivered",
                "acknowledged",
                "failed"
            ],
            "x-enum-varnames": [
                "SENT",
                "DELIVERED",
                "ACKNOWLEDGED",
                "FAILED"
            ]
        },
        "core.Notification": {
            "type": "object",
            "properties": {
                "acknowledgment_status": {
                    "$ref": "#/definitions/core.AcknowledgmentStatus"
                },
                "acknowledgment_time": {
                    "type": "string"
                },
                "action_type": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "data": {
                    "type": "string"
                },
                "entity": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.MessageHistory"
                    }
                },
                "persistent": {
                    "type": "boolean"
                },
                "priority": {
                    "type": "integer"
                },
                "recipients": {
                    "description": "Relationships",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.NotificationRecipient"
                    }
                },
                "retry_count": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "core.NotificationRecipient": {
            "type": "object",
            "properties": {
                "delivered_at": {
                    "type": "string"
                },
                "error_message": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "notification": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.Notification"
                        }
                    ]
                },
                "notification_id": {
                    "type": "string"
                },
                "read_at": {
                    "type": "string"
                },
                "recipient_id": {
                    "type": "string"
                },
                "recipient_type": {
                    "type": "string"
                },
                "retry_count": {
                    "type": "integer"
                },
                "sent_at": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/core.RecipientStatus"
                }
            }
        },
        "core.NotificationRequest": {
            "type": "object",
            "required": [
                "action_type",
                "entity",
                "message",
                "title",
                "type"
            ],
            "properties": {
                "action_type": {
                    "type": "string"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "entity": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "persistent": {
                    "type": "boolean"
                },
                "priority": {
                    "type": "integer"
                },
                "recipient_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "core.NotificationResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "core.RecipientStatus": {
            "type": "string",
            "enum": [
                "pending",
                "sent",
                "delivered",
                "read",
                "failed"
            ],
            "x-enum-varnames": [
                "PENDING",
                "SENT_REC",
                "DELIVERED_REC",
                "READ",
                "FAILED_REC"
            ]
        },
        "core.WebSocketConnection": {
            "type": "object",
            "properties": {
                "connected_at": {
                    "type": "string"
                },
                "connection_id": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ip_address": {
                    "type": "string"
                },
                "last_ping_at": {
                    "type": "string"
                },
                "messages": {
                    "description": "Relationships",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.MessageHistory"
                    }
                },
                "metadata": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/core.ConnectionStatus"
                },
                "user_agent": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "description": "WebSocket connection management",
            "name": "websocket"
        },
        {
            "description": "Notification operations",
            "name": "notifications"
        },
        {
            "description": "Message operations",
            "name": "messages"
        },
        {
            "description": "Health checks and monitoring",
            "name": "health"
        },
        {
            "description": "Administrative operations",
            "name": "admin"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8081",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "WeKart WebSockets API",
	Description:      "Enhanced real-time messaging API for WeKart platform with comprehensive WebSocket support, notification management, and database persistence.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
